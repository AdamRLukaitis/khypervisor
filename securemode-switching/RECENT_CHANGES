commit 5f9f49bdb39cf26ed3cd7dd3f56daae9ea4299bc
Author: Simon Kim <spamhere@kaoma.net>
Date:   Thu Apr 18 16:18:24 2013 +0900

    Secure Mode Switching Example for ARM TrustZone

diff --git a/.gitignore b/.gitignore
index 07eefe1..f775716 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,3 +5,6 @@ model.lds
 config.mk
 *.o
 *.swp
+tags
+modelsemi.lds
+linux-system-semi.axf
diff --git a/boot.S b/boot.S
index 40ebd33..ee57429 100644
--- a/boot.S
+++ b/boot.S
@@ -7,6 +7,8 @@
  * found in the LICENSE.txt file.
  */
 
+#define NS_BIT	0x1
+
 	.syntax	unified
 	.arch_extension sec
 	.arch_extension virt
@@ -29,6 +31,7 @@
 	@ We will end up here in NS-Hyp.
 .endm
 
+
 .align 5
 /* We use the same vector table for Hyp and Monitor mode, since
  * we will only use each once and they don't overlap.
@@ -69,6 +72,20 @@ vectors:
 	movs	pc, lr
 
 
+/*
+ * Monitor Vector Table
+ */
+.align 5
+monitor_vectors:
+	.word 0	/* reset */
+	.word 0	/* undef */
+	b	handler_monitor_smc /* smc */
+	.word 0 /* pabt */
+	.word 0 /* dabt */
+	.word 0 /* hvc */
+	.word 0 /* irq */
+	.word 0 /* fiq */
+
 	.globl	start
 start:
 #ifdef SMP
@@ -192,16 +209,110 @@ __semi_call:
 #endif
 	mov pc, lr
 
-.globl __boot_kernel
-__boot_kernel:
-	mov	r4, r0
-	stmfd	sp!, {r1-r3}
-	ldmia	sp, {r0-r3}
+@ removed __boot_kernel() - simon 
 
-	enter_hyp
+handler_monitor_smc:
+
+	@ World switch
+	@ -------------------------------
+	mrc	p15, 0, r0, c1, c1, 0
+	tst	r0, #NS_BIT
+	EOR	r0, r0, #NS_BIT
+	MCR	p15, 0, r0, c1, c1, 0
+	@ -------------------------------
+
+	@ Load Saving Context Space Address
+	@ ------------------------------------
+	@ Secure -> Non Secure: Save Secure World	- secure_context_sp
+	@ Non Secure -> Secure: Save Non-secure World 	- guest_context_sp
+	ldreq	r0, =secure_context_sp
+	ldrne	r0, =guest_context_sp
+	ldr	r2, [r0]			@ r2 = [saving_context_sp] for saving
+
+	@ Load Restoring Context Space Address
+	@ ------------------------------------
+	ldreq	r1, =guest_context_sp
+	ldrne	r1, =secure_context_sp
+	ldr	r3, [r1]			@ r3 = [restoring_context_sp] for loading
+
+	@ Save the current context -> r2
+	@ ------------------------------------
+	stmfd	r2!, {r4-r12}
+	mrs	r4, spsr
+	stmfd	r2!, {r4, lr}
+
+	str	r2, [r0]			@ [saving_context_sp] = r2
+
+	@ Load the saved context <- r3
+	ldmfd	r3!, {r0, lr}
+						@ First time smc called: S.SVC -> NS.SVC, Non Secure saved only lr
+	tst	r0, #0				@ if ( saved(CPSR) != 0 ) SPSR_CXSF = r0
+	msrne	spsr_cxsf, r0
+	ldmfd	r3!, {r4-r12}
+
+	str	r3, [r1]			@ [restoring_context_sp] = r3
+
+	@ Clear Exclusive Access Record since we are switching the context
+	@ ------------------------
+	clrex
+
+	@pop	{r0-r3}
+
+	@ branch to LR: exception return from Security Monitor Call
+	movs	pc, lr
+
+
+/* Initialize vector and stack pointers for modes: Secure SVC, Non-secure SVC, and Hyp mode
+ * - simon
+ */
+
+.global monitor_init
+monitor_init:
+	push {r0-r2, lr}
+	@ Setup Exception Vector
+	ldr	r1, =monitor_vectors
+	mcr	p15, 0, r1, c12, c0, 1		@ Monitor vector base address
+
+	@ NS.SVC entry
+	@ -------------
+	@	[guest_context_stack_limit] = 
+	ldr	r0, =guest_context_stack_limit
+	stmfd	r0!, {r4, r12}
+
+	mov	r1, 0				@ Invalid CPSR, No need to load
+	ldr	r2, =guest_start
+	stmfd	r0!, {r1, r2}			@ CPSR, LR
+	
+	ldr 	r1, =guest_context_sp
+	str	r0, [r1]			@ [guest_context_sp] = stack pointer for next time load
+						@ [guest_context_sp] = guest_context_stack_limit - context_size
+
+	ldr	r0, =secure_context_stack_limit
+	ldr	r1, =secure_context_sp
+	str	r0, [r1]			@ [secure_context_sp] = secure_context_stack_limit
+
+
+	@ NS.HYP entry
+	@ ------------
+	@ TODO: Implement this part
+
+	@ regular return
+	pop {r0-r2, pc}
+	
+.type monitor_init, %function
+
+	
+	@ Guest start code
+guest_start:
+	@ stack for guest
+	ldr     sp, =guest_stacktop
+
+	@ And call the C entrypoint
+	bl      nrm_loop
+
+	@ Hyp mode start code
+hyp_start:
 
-	bx	r4
-.type __boot_kernel, %function
 
 	@
 	@ Data
@@ -214,3 +325,32 @@ kernel_cmd:
 	.asciz KCMD
 #endif
 kernel_cmd_end:
+
+
+.data
+	@ Space for secure context
+secure_context_stack_base:
+	.word	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+secure_context_stack_limit:
+
+	@ Space for guest context
+guest_context_stack_base:
+	.word	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+guest_context_stack_limit:
+
+	@ Space for hyp context
+hyp_context_stack:
+	.word	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
+hyp_context_stack_limit:
+
+	@ Address to last time saved/loaded in the Secure context space
+secure_context_sp:
+	.word 	0
+
+	@ Address to last time saved/loaded in the Non Secure context space
+guest_context_sp:
+	.word	0
+
+	@ Address to last time saved/loaded in the Hyp context space
+hyp_context_sp:
+	.word	0
diff --git a/c_start.c b/c_start.c
index dbdcc62..0e47a27 100644
--- a/c_start.c
+++ b/c_start.c
@@ -41,25 +41,45 @@ static struct loader_info loader;
 #define PLAT_ID 827 /* RealView/EB */
 #endif
 
+extern void monitor_init(void);
+extern void monitor_smc(void);
+
+void sec_loop(void);
+void nrm_loop(void) ;
+
 void c_start(void)
 {
-	/* Main C entry point */
-	loader.kernel_size = (uint32_t)&kernel_end - (uint32_t)&kernel_start;
-	loader.initrd_start = (uint32_t)&fs_start;
-	loader.initrd_size = (uint32_t)&fs_end - (uint32_t)&fs_start;
-	loader.kernel_entry = (uint32_t)&kernel_entry;
-	if (loader.kernel_size) {
-		loader.cmdline_start = (uint32_t)&kernel_cmd;
-		loader.cmdline_size = &kernel_cmd_end - &kernel_cmd;
-	}
-	load_kernel(&loader);
+	semi_write0("[bootwrapper] Starting...\n");
+
+	/* Initialize Monitor by installing Secure Monitor Call Execption handler */
+	monitor_init();
+
+	/* Begin with Secure world loop */
+	sec_loop();
+
+}
 
-	/* Start the kernel */
-	if(loader.fdt_start) {
-		boot_kernel(&loader, 0, -1, loader.fdt_start, 0);
-	} else {
-		boot_kernel(&loader, 0, PLAT_ID, loader.atags_start, 0);
+void sec_loop(void)
+{
+	int i = 0;
+	for( i = 0; i < 10; i++ ) {
+		semi_write0("[sec] hello\n");
+		/* World Switch to Non-Secure through Secure Monitor Call Exception */
+		asm ("smc #0");		/* -> guest_start: or nrm_loop() */
 	}
+	semi_write0("[sec] done\n");
+
+	/* Give the last turn to nrm_loop() to execute it's the last line of the code */
+	asm ("smc #0");
+}
 
-	semi_write0("[bootwrapper] ERROR: returned from boot_kernel\n");
+void nrm_loop(void) 
+{
+	int i = 0;
+	for( i = 0; i < 10; i++ ) {
+		semi_write0("[nrm] hello\n");
+		/* World Switch to Secure through Secure Monitor Call Exception */
+		asm ("smc #0");		/* -> sec_loop() */
+	}
+	semi_write0("[nrm] done\n");
 }
diff --git a/config-default.mk b/config-default.mk
index 6c73934..d23f404 100644
--- a/config-default.mk
+++ b/config-default.mk
@@ -63,7 +63,8 @@ endif # SYSTEM = mps
 ifeq ($(SYSTEM),realview_eb)
 
 #CPPFLAGS	+= -DSMP
-CPPFLAGS	+= -march=armv7-a -marm
+#CPPFLAGS	+= -march=armv7-a -marm
+CPPFLAGS	+= -mcpu=cortex-a15
 #CPPFLAGS	+= -DTHUMB2_KERNEL
 
 # Default kernel command line, using initrd:
@@ -84,9 +85,10 @@ endif # SYSTEM = realvire_eb
 ifeq ($(SYSTEM),vexpress)
 
 CPPFLAGS	+= -DSMP
-CPPFLAGS	+= -march=armv7-a -marm
+#CPPFLAGS	+= -march=armv7-a -marm
+CPPFLAGS	+= -mcpu=cortex-a15
 #CPPFLAGS	+= -DTHUMB2_KERNEL
-CPPFLAGS	+= -DVEXPRESS
+CPPFLAGS	+= -DVEXPRESS -g
 
 # Default kernel command line, using initrd:
 ifeq ($(USE_INITRD),yes)
diff --git a/model.lds.S b/model.lds.S
index 793df89..309de68 100644
--- a/model.lds.S
+++ b/model.lds.S
@@ -24,6 +24,14 @@ PHYS_OFFSET = 0x80000000;
 MON_OFFSET  = 0xf0000000;
 STACKTOP = 0xff000000;
 
+/* NS.SVC mode code space 
+ * - simon
+ */
+GUEST_OFFSET  	= 0xE0000000;
+GUEST_STACK  	= 0xEF000000;
+
+HYP_OFFSET	= 0xD0000000;
+HYP_STACK	= 0xDF000000;
 
 SECTIONS
 {
@@ -38,6 +46,7 @@ SECTIONS
 #endif
  kernel_end = .;
 
+
  . = PHYS_OFFSET + 0x00d00000;
  fs_start = .;
 #if defined(USE_INITRD) && !defined(SEMIHOSTING)
@@ -45,6 +54,21 @@ SECTIONS
 #endif
  fs_end = .;
 
+/* Guest image between Kernel and Mon */
+ . = GUEST_OFFSET;
+ guest_start = .;
+ . = GUEST_STACK;
+ guest_stacktop = .;
+ . = GUEST_STACK + 0x01000000; 
+ guest_stacklimit = .;
+
+/* Hyp image follows */
+ . = HYP_OFFSET;
+ hyp_start = .;
+ . = HYP_STACK;
+ hyp_stacktop = .;
+ . = HYP_STACK + 0x01000000;
+ hyp_stacklimit = .;
 
  . = MON_OFFSET;
  /* Put most of the actual boot loader code up in high memory
diff --git a/run.sh b/run.sh
new file mode 100644
index 0000000..e879b85
--- /dev/null
+++ b/run.sh
@@ -0,0 +1 @@
+modeldebugger /home/simon/ARM/FastModelsPortfolio_8.0/examples/RTSM_VE/Build_Cortex-A15x1/Linux64-Release-GCC-4.4/cadi_system_Linux64-Release-GCC-4.4.so /home/simon/Virtualization/boot-wrapper/linux-system-semi.axf
diff --git a/semi_loader.h b/semi_loader.h
index 29f3d63..920bc91 100644
--- a/semi_loader.h
+++ b/semi_loader.h
@@ -90,12 +90,6 @@ struct loader_info {
 
 void load_kernel(struct loader_info *info);
 
-void __boot_kernel(unsigned entry_point,
-			unsigned r0, unsigned r1, unsigned r2, unsigned r3);
-
-static void boot_kernel(struct loader_info *info,
-		unsigned r0, unsigned r1, unsigned r2, unsigned r3) {
-	__boot_kernel(info->kernel_entry, r0, r1, r2, r3);
-}
+/* removed __boot_kernel() - simon */
 
 #endif /* ! SEMI_LOADER_H */
